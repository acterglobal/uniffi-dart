

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_uniffi_callbacks_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_uniffi_callbacks_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_uniffi_callbacks_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_fixture_callbacks")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_uniffi_callbacks_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_bool() != 19898:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_list() != 44881:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_nothing() != 2399:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_option() != 4218:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string() != 28239:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string_optional_callback() != 49784:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_ruststringifier_from_simple_type() != 22111:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_constructor_rustgetters_new() != 20461:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_constructor_ruststringifier_new() != 12494:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_bool() != 54669:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_string() != 52771:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_option() != 64688:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_list() != 63503:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_nothing() != 59367:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_simple_type() != 14937:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_complex_type() != 45101:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,ctypes.c_int8,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_int8,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_int8,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_int8,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int32,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
class UniffiVTableCallbackInterfaceForeignGetters(ctypes.Structure):
    _fields_ = [
        ("get_bool", UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD0),
        ("get_string", UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD1),
        ("get_option", UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD2),
        ("get_list", UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD3),
        ("get_nothing", UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD4),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceStoredForeignStringifier(ctypes.Structure):
    _fields_ = [
        ("from_simple_type", UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD0),
        ("from_complex_type", UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD1),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_uniffi_callbacks_fn_clone_rustgetters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_clone_rustgetters.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_callbacks_fn_free_rustgetters.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_free_rustgetters.restype = None
_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_rustgetters_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_rustgetters_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_bool.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_int8,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_bool.restype = ctypes.c_int8
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_list.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_list.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_nothing.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_nothing.restype = None
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_option.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_option.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string_optional_callback.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string_optional_callback.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_callbacks_fn_clone_ruststringifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_clone_ruststringifier.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_callbacks_fn_free_ruststringifier.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_free_ruststringifier.restype = None
_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_ruststringifier_new.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_ruststringifier_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_callbacks_fn_method_ruststringifier_from_simple_type.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_method_ruststringifier_from_simple_type.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_foreigngetters.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceForeignGetters),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_foreigngetters.restype = None
_UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_storedforeignstringifier.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceStoredForeignStringifier),
)
_UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_storedforeignstringifier.restype = None
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_free.restype = None
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i8.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i16.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_u64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_u64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_i64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_i64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_f32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_f32.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_f64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_f64.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_pointer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_poll_void.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_cancel_void.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_free_void.restype = None
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_callbacks_rust_future_complete_void.restype = None
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_bool.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_bool.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_list.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_list.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_nothing.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_nothing.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_option.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_option.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string_optional_callback.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_rustgetters_get_string_optional_callback.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_ruststringifier_from_simple_type.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_ruststringifier_from_simple_type.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_constructor_rustgetters_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_constructor_rustgetters_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_constructor_ruststringifier_new.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_constructor_ruststringifier_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_bool.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_bool.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_string.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_option.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_option.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_list.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_list.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_nothing.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_foreigngetters_get_nothing.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_simple_type.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_simple_type.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_complex_type.argtypes = (
)
_UniffiLib.uniffi_uniffi_callbacks_checksum_method_storedforeignstringifier_from_complex_type.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_callbacks_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_uniffi_callbacks_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write(value, buf):
        buf.write_i32(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class RustGettersProtocol(typing.Protocol):
    """
    These objects are implemented in Rust, and call out to `ForeignGetters`
    to get the value.
    """

    def get_bool(self, callback: "ForeignGetters",v: "bool",argument_two: "bool"):
        raise NotImplementedError
    def get_list(self, callback: "ForeignGetters",v: "typing.List[int]",arg2: "bool"):
        raise NotImplementedError
    def get_nothing(self, callback: "ForeignGetters",v: "str"):
        raise NotImplementedError
    def get_option(self, callback: "ForeignGetters",v: "typing.Optional[str]",arg2: "bool"):
        raise NotImplementedError
    def get_string(self, callback: "ForeignGetters",v: "str",arg2: "bool"):
        raise NotImplementedError
    def get_string_optional_callback(self, callback: "typing.Optional[ForeignGetters]",v: "str",arg2: "bool"):
        raise NotImplementedError


class RustGetters:
    """
    These objects are implemented in Rust, and call out to `ForeignGetters`
    to get the value.
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_rustgetters_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_free_rustgetters, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_clone_rustgetters, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_bool(self, callback: "ForeignGetters",v: "bool",argument_two: "bool") -> "bool":
        _UniffiConverterCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterBool.check_lower(v)
        
        _UniffiConverterBool.check_lower(argument_two)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeSimpleError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_bool,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterBool.lower(v),
        _UniffiConverterBool.lower(argument_two))
        )





    def get_list(self, callback: "ForeignGetters",v: "typing.List[int]",arg2: "bool") -> "typing.List[int]":
        _UniffiConverterCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterSequenceInt32.check_lower(v)
        
        _UniffiConverterBool.check_lower(arg2)
        
        return _UniffiConverterSequenceInt32.lift(
            _rust_call_with_error(_UniffiConverterTypeSimpleError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_list,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterSequenceInt32.lower(v),
        _UniffiConverterBool.lower(arg2))
        )





    def get_nothing(self, callback: "ForeignGetters",v: "str") -> None:
        _UniffiConverterCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterString.check_lower(v)
        
        _rust_call_with_error(_UniffiConverterTypeSimpleError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_nothing,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterString.lower(v))






    def get_option(self, callback: "ForeignGetters",v: "typing.Optional[str]",arg2: "bool") -> "typing.Optional[str]":
        _UniffiConverterCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterOptionalString.check_lower(v)
        
        _UniffiConverterBool.check_lower(arg2)
        
        return _UniffiConverterOptionalString.lift(
            _rust_call_with_error(_UniffiConverterTypeComplexError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_option,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterOptionalString.lower(v),
        _UniffiConverterBool.lower(arg2))
        )





    def get_string(self, callback: "ForeignGetters",v: "str",arg2: "bool") -> "str":
        _UniffiConverterCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterString.check_lower(v)
        
        _UniffiConverterBool.check_lower(arg2)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeSimpleError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterString.lower(v),
        _UniffiConverterBool.lower(arg2))
        )





    def get_string_optional_callback(self, callback: "typing.Optional[ForeignGetters]",v: "str",arg2: "bool") -> "typing.Optional[str]":
        _UniffiConverterOptionalCallbackInterfaceForeignGetters.check_lower(callback)
        
        _UniffiConverterString.check_lower(v)
        
        _UniffiConverterBool.check_lower(arg2)
        
        return _UniffiConverterOptionalString.lift(
            _rust_call_with_error(_UniffiConverterTypeSimpleError,_UniffiLib.uniffi_uniffi_callbacks_fn_method_rustgetters_get_string_optional_callback,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalCallbackInterfaceForeignGetters.lower(callback),
        _UniffiConverterString.lower(v),
        _UniffiConverterBool.lower(arg2))
        )






class _UniffiConverterTypeRustGetters:

    @staticmethod
    def lift(value: int):
        return RustGetters._make_instance_(value)

    @staticmethod
    def check_lower(value: RustGetters):
        if not isinstance(value, RustGetters):
            raise TypeError("Expected RustGetters instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RustGettersProtocol):
        if not isinstance(value, RustGetters):
            raise TypeError("Expected RustGetters instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RustGettersProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RustStringifierProtocol(typing.Protocol):
    """
    Rust object that uses the StoredForeignStringifier to produce string representations
    of passed arguments.
    """

    def from_simple_type(self, value: "int"):
        raise NotImplementedError


class RustStringifier:
    """
    Rust object that uses the StoredForeignStringifier to produce string representations
    of passed arguments.
    """

    _pointer: ctypes.c_void_p
    def __init__(self, callback: "StoredForeignStringifier"):
        _UniffiConverterCallbackInterfaceStoredForeignStringifier.check_lower(callback)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_constructor_ruststringifier_new,
        _UniffiConverterCallbackInterfaceStoredForeignStringifier.lower(callback))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_free_ruststringifier, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_clone_ruststringifier, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def from_simple_type(self, value: "int") -> "str":
        _UniffiConverterInt32.check_lower(value)
        
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_uniffi_callbacks_fn_method_ruststringifier_from_simple_type,self._uniffi_clone_pointer(),
        _UniffiConverterInt32.lower(value))
        )






class _UniffiConverterTypeRustStringifier:

    @staticmethod
    def lift(value: int):
        return RustStringifier._make_instance_(value)

    @staticmethod
    def check_lower(value: RustStringifier):
        if not isinstance(value, RustStringifier):
            raise TypeError("Expected RustStringifier instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RustStringifierProtocol):
        if not isinstance(value, RustStringifier):
            raise TypeError("Expected RustStringifier instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RustStringifierProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


# ComplexError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ComplexError(Exception):
    pass

_UniffiTempComplexError = ComplexError

class ComplexError:  # type: ignore
    class ReallyBadArgument(_UniffiTempComplexError):

        def __init__(self, code):
            super().__init__(", ".join([
                "code={!r}".format(code),
            ]))
            self.code = code
        def __repr__(self):
            return "ComplexError.ReallyBadArgument({})".format(str(self))
    _UniffiTempComplexError.ReallyBadArgument = ReallyBadArgument # type: ignore
    class UnexpectedErrorWithReason(_UniffiTempComplexError):

        def __init__(self, reason):
            super().__init__(", ".join([
                "reason={!r}".format(reason),
            ]))
            self.reason = reason
        def __repr__(self):
            return "ComplexError.UnexpectedErrorWithReason({})".format(str(self))
    _UniffiTempComplexError.UnexpectedErrorWithReason = UnexpectedErrorWithReason # type: ignore

ComplexError = _UniffiTempComplexError # type: ignore
del _UniffiTempComplexError


class _UniffiConverterTypeComplexError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ComplexError.ReallyBadArgument(
                code=_UniffiConverterInt32.read(buf),
            )
        if variant == 2:
            return ComplexError.UnexpectedErrorWithReason(
                reason=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, ComplexError.ReallyBadArgument):
            _UniffiConverterInt32.check_lower(value.code)
            return
        if isinstance(value, ComplexError.UnexpectedErrorWithReason):
            _UniffiConverterString.check_lower(value.reason)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, ComplexError.ReallyBadArgument):
            buf.write_i32(1)
            _UniffiConverterInt32.write(value.code, buf)
        if isinstance(value, ComplexError.UnexpectedErrorWithReason):
            buf.write_i32(2)
            _UniffiConverterString.write(value.reason, buf)


# SimpleError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class SimpleError(Exception):
    pass

_UniffiTempSimpleError = SimpleError

class SimpleError:  # type: ignore
    class BadArgument(_UniffiTempSimpleError):

        def __repr__(self):
            return "SimpleError.BadArgument({})".format(repr(str(self)))
    _UniffiTempSimpleError.BadArgument = BadArgument # type: ignore
    class UnexpectedError(_UniffiTempSimpleError):

        def __repr__(self):
            return "SimpleError.UnexpectedError({})".format(repr(str(self)))
    _UniffiTempSimpleError.UnexpectedError = UnexpectedError # type: ignore

SimpleError = _UniffiTempSimpleError # type: ignore
del _UniffiTempSimpleError


class _UniffiConverterTypeSimpleError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return SimpleError.BadArgument(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return SimpleError.UnexpectedError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, SimpleError.BadArgument):
            return
        if isinstance(value, SimpleError.UnexpectedError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, SimpleError.BadArgument):
            buf.write_i32(1)
        if isinstance(value, SimpleError.UnexpectedError):
            buf.write_i32(2)



class ForeignGetters(typing.Protocol):
    """
    These objects are implemented by the foreign language and passed
    to Rust. Rust then calls methods on it when it needs to.

    Some methods throw SimpleError and some throw ComplexError so that we can test both field-less and fielded errors
    """

    def get_bool(self, v: "bool",argument_two: "bool"):
        raise NotImplementedError
    def get_string(self, v: "str",arg2: "bool"):
        raise NotImplementedError
    def get_option(self, v: "typing.Optional[str]",arg2: "bool"):
        raise NotImplementedError
    def get_list(self, v: "typing.List[int]",arg2: "bool"):
        raise NotImplementedError
    def get_nothing(self, v: "str"):
        raise NotImplementedError
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplForeignGetters:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD0
    def get_bool(
            uniffi_handle,
            v,
            argument_two,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceForeignGetters._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterBool.lift(v), _UniffiConverterBool.lift(argument_two), )
            method = uniffi_obj.get_bool
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                SimpleError,
                _UniffiConverterTypeSimpleError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD1
    def get_string(
            uniffi_handle,
            v,
            arg2,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceForeignGetters._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(v), _UniffiConverterBool.lift(arg2), )
            method = uniffi_obj.get_string
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                SimpleError,
                _UniffiConverterTypeSimpleError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD2
    def get_option(
            uniffi_handle,
            v,
            arg2,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceForeignGetters._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterOptionalString.lift(v), _UniffiConverterBool.lift(arg2), )
            method = uniffi_obj.get_option
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterOptionalString.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                ComplexError,
                _UniffiConverterTypeComplexError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD3
    def get_list(
            uniffi_handle,
            v,
            arg2,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceForeignGetters._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceInt32.lift(v), _UniffiConverterBool.lift(arg2), )
            method = uniffi_obj.get_list
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterSequenceInt32.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                SimpleError,
                _UniffiConverterTypeSimpleError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FOREIGN_GETTERS_METHOD4
    def get_nothing(
            uniffi_handle,
            v,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceForeignGetters._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(v), )
            method = uniffi_obj.get_nothing
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                SimpleError,
                _UniffiConverterTypeSimpleError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceForeignGetters._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceForeignGetters(
        get_bool,
        get_string,
        get_option,
        get_list,
        get_nothing,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_foreigngetters(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceForeignGetters = UniffiCallbackInterfaceFfiConverter()



class StoredForeignStringifier(typing.Protocol):
    """
    These objects are implemented by the foreign language and passed
    to Rust. Rust then calls methods on it when it needs to.
    Rust developers need to declare these traits extending `Send` so
    they can be stored in Rust— i.e. not passed in as an argument to
    be used immediately.

    These methods don't throw any error so that we can test older callback
    """

    def from_simple_type(self, value: "int"):
        raise NotImplementedError
    def from_complex_type(self, values: "typing.Optional[typing.List[typing.Optional[float]]]"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplStoredForeignStringifier:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD0
    def from_simple_type(
            uniffi_handle,
            value,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceStoredForeignStringifier._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterInt32.lift(value), )
            method = uniffi_obj.from_simple_type
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_STORED_FOREIGN_STRINGIFIER_METHOD1
    def from_complex_type(
            uniffi_handle,
            values,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceStoredForeignStringifier._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterOptionalSequenceOptionalDouble.lift(values), )
            method = uniffi_obj.from_complex_type
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceStoredForeignStringifier._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceStoredForeignStringifier(
        from_simple_type,
        from_complex_type,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_uniffi_callbacks_fn_init_callback_vtable_storedforeignstringifier(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceStoredForeignStringifier = UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalDouble(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDouble.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDouble.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDouble.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalCallbackInterfaceForeignGetters(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterCallbackInterfaceForeignGetters.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterCallbackInterfaceForeignGetters.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterCallbackInterfaceForeignGetters.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceOptionalDouble(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceOptionalDouble.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceOptionalDouble.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceOptionalDouble.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterInt32.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterInt32.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterInt32.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceOptionalDouble(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterOptionalDouble.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterOptionalDouble.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterOptionalDouble.read(buf) for i in range(count)
        ]

# Async support

__all__ = [
    "InternalError",
    "ComplexError",
    "SimpleError",
    "RustGetters",
    "RustStringifier",
    "ForeignGetters",
    "StoredForeignStringifier",
]

