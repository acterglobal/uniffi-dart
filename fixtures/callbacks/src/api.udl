namespace callbacks { };

[Error]
enum SimpleError {
  "BadArgument",
  "UnexpectedError",
};

[Error]
interface ComplexError {
   ReallyBadArgument(i32 code);
   UnexpectedErrorWithReason(string reason);
};


/// These objects are implemented by the foreign language and passed
/// to Rust. Rust then calls methods on it when it needs to.
///
/// Some methods throw SimpleError and some throw ComplexError so that we can test both field-less and fielded errors
callback interface ForeignGetters {
  [Throws=SimpleError]
  boolean get_bool(boolean v, boolean argument_two);
  [Throws=SimpleError]
  string get_string(string v, boolean arg2);
  [Throws=ComplexError]
  string? get_option(string? v, boolean arg2);
  [Throws=SimpleError]
  sequence<i32> get_list(sequence<i32> v, boolean arg2);
  [Throws=SimpleError]
  void get_nothing(string v);
};

/// These objects are implemented in Rust, and call out to `ForeignGetters`
/// to get the value.
interface RustGetters {
  constructor();
  [Throws=SimpleError]
  boolean get_bool(ForeignGetters callback, boolean v, boolean argument_two);
  [Throws=SimpleError]
  string get_string(ForeignGetters callback, string v, boolean arg2);
  [Throws=ComplexError]
  string? get_option(ForeignGetters callback, string? v, boolean arg2);
  [Throws=SimpleError]
  sequence<i32> get_list(ForeignGetters callback, sequence<i32> v, boolean arg2);
  [Throws=SimpleError]
  string? get_string_optional_callback(ForeignGetters? callback, string v, boolean arg2);
  [Throws=SimpleError]
  void get_nothing(ForeignGetters callback, string v);
};

/// These objects are implemented by the foreign language and passed
/// to Rust. Rust then calls methods on it when it needs to.
/// Rust developers need to declare these traits extending `Send` so
/// they can be stored in Rustâ€” i.e. not passed in as an argument to
/// be used immediately.
///
/// These methods don't throw any error so that we can test older callback
//interfaces that don't support them.
callback interface StoredForeignStringifier {
  string from_simple_type(i32 value);
  // Test if types are collected from callback interfaces.
  // kotlinc compile time error if not.
  string from_complex_type(sequence<f64?>? values);
};

/// Rust object that uses the StoredForeignStringifier to produce string representations
/// of passed arguments.
interface RustStringifier {
  constructor(StoredForeignStringifier callback);
  string from_simple_type(i32 value);
};